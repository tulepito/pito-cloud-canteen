{
  // Place your pito-cloud-canteen workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Typescript final-form snippet": {
    "prefix": "tsfinalform",
    "body": [
      "import Form from '@components/Form/Form';",
      "import type { FormProps, FormRenderProps } from 'react-final-form';",
      "import { Form as FinalForm } from 'react-final-form';",
      "",
      "export type T${1:$TM_FILENAME_BASE}Values = {};",
      "",
      "type TExtraProps = {};",
      "type T${1:$TM_FILENAME_BASE}ComponentProps = FormRenderProps<T${1:$TM_FILENAME_BASE}Values> &",
      "  Partial<TExtraProps>;",
      "type T${1:$TM_FILENAME_BASE}Props = FormProps<T${1:$TM_FILENAME_BASE}Values> & TExtraProps;",
      "",
      "const ${1:$TM_FILENAME_BASE}Component: React.FC<T${1:$TM_FILENAME_BASE}ComponentProps> = (props) => {",
      "  const { handleSubmit } = props;",
      "",
      "  return (",
      "    <Form onSubmit={handleSubmit}>",
      "      <></>",
      "    </Form>",
      "  );",
      "};",
      "",
      "const ${1:$TM_FILENAME_BASE}: React.FC<T${1:$TM_FILENAME_BASE}Props> = (props) => {",
      "  return <FinalForm {...props} component={${1:$TM_FILENAME_BASE}Component} />;",
      "};",
      "",
      "export default ${1:$TM_FILENAME_BASE};",
      ""
    ],
    "description": "Create typescript react-final-form"
  },
  "RTK slice snippet": {
    "prefix": "slice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "",
      "// ================ Initial states ================ //",
      "type T${TM_FILENAME_BASE/(^[a-z])/${1:/upcase}/}State = {};",
      "const initialState: T${TM_FILENAME_BASE/(^[a-z])/${1:/upcase}/}State = {};",
      "",
      "// ================ Thunk types ================ //",
      "",
      "// ================ Async thunks ================ //",
      "export const ${1:$TM_FILENAME_BASE}Thunks = {};",
      "",
      "// ================ Slice ================ //",
      "const ${1:$TM_FILENAME_BASE}Slice = createSlice({",
      "  name: '${1:$TM_FILENAME_BASE}',",
      "  initialState,",
      "  reducers: {},",
      "  extraReducers: () => {},",
      "});",
      "",
      "// ================ Actions ================ //",
      "export const ${1:$TM_FILENAME_BASE}Action = ${1:$TM_FILENAME_BASE}Slice.actions;",
      "export default ${1:$TM_FILENAME_BASE}Slice.reducer;",
      "",
      "// ================ Selectors ================ //",
      ""
    ],
    "description": "Redux toolkit slice snippet"
  }
}
