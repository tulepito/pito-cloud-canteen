import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export const createNewPrint = (id: string) => {
  const promise = new Promise((resolve, _reject) => {
    resolve({});
  });
  if (typeof window !== 'undefined' && jsPDF && html2canvas) {
    const ele = document.querySelector(`#${id}`);
    if (ele !== null && typeof ele === 'object') {
      // eslint-disable-next-line new-cap
      const doc = new jsPDF('p', 'pt', 'a4');

      return html2canvas(
        ele as any,
        {
          scrollX: -window.scrollX,
          scrollY: -window.scrollY,
          logging: true,
          letterRendering: 1,
          allowTaint: false,
          useCORS: true,
        } as any,
      ).then((canvas) => {
        const contentWidth = canvas.width;
        const contentHeight = canvas.height;
        // One page pdf shows the canvas height generated by html pages.
        const pageHeight = (contentWidth / 592.28) * 841.89;
        // html page height without pdf generation
        let leftHeight = contentHeight;
        // Page offset
        let position = 0;
        // a4 paper size [595.28, 841.89], html page generated canvas in pdf picture width
        const imgWidth = 595.28;
        const imgHeight = (imgWidth / contentWidth) * contentHeight;
        const pageData = canvas.toDataURL('image/jpeg', 1.0);
        // There are two heights to distinguish, one is the actual height of the html page, and the page height of the generated pdf (841.89)
        // When the content does not exceed the range of pdf page display, there is no need to paginate
        if (leftHeight < pageHeight) {
          /* addImage explained below:
              param 1 -> image in code format
              param 2 -> type of the image. SVG not supported. needs to be either PNG or JPEG.
              all params are specified in integer
              param 3 -> X axis margin from left
              param 4 -> Y axis margin from top
              param 5 -> width of the image
              param 6 -> height of the image
          */
          doc.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight);
        } else {
          while (leftHeight > 0) {
            doc.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight);
            leftHeight -= pageHeight;
            position -= 841.89;
            // Avoid adding blank pages
            if (leftHeight > 0) {
              doc.addPage();
            }
          }
        }

        return { doc, id };
      });
    }

    return promise;
  }

  return promise;
};
